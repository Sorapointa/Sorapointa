syntax = "proto3";

package proto;

option java_package = "org.sorapointa.proto.bin";

enum ENetReason {
  ENET_TIMEOUT = 0;
  ENET_CLIENT_CLOSE = 1;
  ENET_CLIENT_REBIND_FAIL = 2;
  ENET_CLIENT_SHUTDOWN = 3;
  ENET_SERVER_RELOGIN = 4;
  ENET_SERVER_KICK = 5;
  ENET_SERVER_SHUTDOWN = 6;
  ENET_NOT_FOUND_SESSION = 7;
  ENET_LOGIN_UNFINISHED = 8;
  ENET_PACKET_FREQ_TOO_HIGH = 9;
  ENET_PING_TIMEOUT = 10;
  ENET_TRANFER_FAILED = 11;
  ENET_SERVER_KILL_CLIENT = 12;
  ENET_CHECK_MOVE_SPEED = 13;
  ENET_ACCOUNT_PASSWORD_CHANGE = 14;
  ENET_SECURITY_KICK = 15;
  ENET_LUA_SHELL_TIMEOUT = 16;
  ENET_SDKFAIL_KICK = 17;
  ENET_PACKET_COST_TIME = 18;
  ENET_PACKET_UNION_FREQ = 19;
  ENET_WAIT_SND_MAX = 20;
  ENET_CLIENT_CONNECT_KEY = 1234567890;
  ENET_CLIENT_EDITOR_CONNECT_KEY = 987654321;
}

enum AccountType {
  ACCOUNT_MIHOYO_GUEST = 0;
  ACCOUNT_MIHOYO = 1;
  ACCOUNT_XIAOMI = 11;
  ACCOUNT_COOLPAD = 12;
  ACCOUNT_YYB = 13;
  ACCOUNT_BILI = 14;
  ACCOUNT_HUAWEI = 15;
  ACCOUNT_MEIZU = 16;
  ACCOUNT_360 = 17;
  ACCOUNT_OPPO = 18;
  ACCOUNT_VIVO = 19;
  ACCOUNT_UC = 20;
  ACCOUNT_WANDOJIA = 21;
  ACCOUNT_LENOVO = 22;
  ACCOUNT_JINLI = 23;
  ACCOUNT_BAIDU = 25;
  ACCOUNT_DANGLE = 26;
}

enum ChannelIdType {
  CHANNEL_ID_NONE = 0;
  CHANNEL_ID_MIHOYO = 1;
  CHANNEL_ID_XIAOMI = 11;
  CHANNEL_ID_COOLPAD = 12;
  CHANNEL_ID_YYB = 13;
  CHANNEL_ID_BILI = 14;
  CHANNEL_ID_HUAWEI = 15;
  CHANNEL_ID_MEIZU = 16;
  CHANNEL_ID_360 = 17;
  CHANNEL_ID_OPPO = 18;
  CHANNEL_ID_VIVO = 19;
  CHANNEL_ID_UC = 20;
  CHANNEL_ID_LENOVO = 22;
  CHANNEL_ID_JINLI = 23;
  CHANNEL_ID_BAIDU = 25;
  CHANNEL_ID_DANGLE = 26;
}

enum ServiceType {
  SERVICE_NONE = 0;
  SERVICE_CLIENT = 1;
  SERVICE_GATE = 2;
  SERVICE_GAME = 3;
  SERVICE_NODE = 4;
  SERVICE_DB = 5;
  SERVICE_SNS = 6;
  SERVICE_DISPATCH = 7;
  SERVICE_MUIP = 8;
  SERVICE_OFFLINE_MSG = 9;
  SERVICE_MAIL = 10;
  SERVICE_MP = 11;
  SERVICE_HTTPPROXY = 12;
  SERVICE_ACTIVITY = 13;
  SERVICE_PATHFINDING = 14;
  SERVICE_SOCIAL = 15;
  SERVICE_OA = 16;
  SERVICE_MATCH = 17;
  SERVICE_OFFLINE_OP = 18;
  SERVICE_TOTHEMOON = 19;
  SERVICE_GCG = 20;
}

enum ClientType {
  CLIENT_PRODUCT = 0;
  CLIENT_DEV = 1;
}

enum RegionType {
  REGION_PRODUCT = 0;
  REGION_EXAM = 1;
  REGION_DEV_PUB = 2;
  REGION_DEV_PRI = 3;
}

enum ActionReasonType {
  ACTION_REASON_NONE = 0;
  ACTION_REASON_QUEST_ITEM = 1;
  ACTION_REASON_QUEST_REWARD = 2;
  ACTION_REASON_TRIFLE = 3;
  ACTION_REASON_SHOP = 4;
  ACTION_REASON_PLAYER_UPGRADE_REWARD = 5;
  ACTION_REASON_ADD_AVATAR = 6;
  ACTION_REASON_GADGET_ENV_ANIMAL = 7;
  ACTION_REASON_MONSTER_ENV_ANIMAL = 8;
  ACTION_REASON_COMPOUND = 9;
  ACTION_REASON_COOK = 10;
  ACTION_REASON_GATHER = 11;
  ACTION_REASON_MAIL_ATTACHMENT = 12;
  ACTION_REASON_CITY_LEVELUP_RETURN = 15;
  ACTION_REASON_CITY_LEVELUP_REWARD = 17;
  ACTION_REASON_AREA_EXPLORE_REWARD = 18;
  ACTION_REASON_UNLOCK_POINT_REWARD = 19;
  ACTION_REASON_DUNGEON_FIRST_PASS = 20;
  ACTION_REASON_DUNGEON_PASS = 21;
  ACTION_REASON_CHANGE_ELEM_TYPE = 23;
  ACTION_REASON_FETTER_OPEN = 25;
  ACTION_REASON_DAILY_TASK_SCORE = 26;
  ACTION_REASON_DAILY_TASK_HOST = 27;
  ACTION_REASON_RAND_TASK_HOST = 28;
  ACTION_REASON_EXPEDITION = 29;
  ACTION_REASON_GACHA = 30;
  ACTION_REASON_COMBINE = 31;
  ACTION_REASON_RAND_TASK_GUEST = 32;
  ACTION_REASON_DAILY_TASK_GUEST = 33;
  ACTION_REASON_FORGE_OUTPUT = 34;
  ACTION_REASON_FORGE_RETURN = 35;
  ACTION_REASON_INIT_AVATAR = 36;
  ACTION_REASON_MONSTER_DIE = 37;
  ACTION_REASON_GM = 38;
  ACTION_REASON_OPEN_CHEST = 39;
  ACTION_REASON_GADGET_DIE = 40;
  ACTION_REASON_MONSTER_CHANGE_HP = 41;
  ACTION_REASON_SUBFIELD_DROP = 42;
  ACTION_REASON_PUSH_TIPS_REWARD = 43;
  ACTION_REASON_ACTIVITY_MONSTER_DROP = 44;
  ACTION_REASON_ACTIVITY_GATHER = 45;
  ACTION_REASON_ACTIVITY_SUBFIELD_DROP = 46;
  ACTION_REASON_TOWER_SCHEDULE_REWARD = 47;
  ACTION_REASON_TOWER_FLOOR_STAR_REWARD = 48;
  ACTION_REASON_TOWER_FIRST_PASS_REWARD = 49;
  ACTION_REASON_TOWER_DAILY_REWARD = 50;
  ACTION_REASON_HIT_CLIENT_TRIVIAL_ENTITY = 51;
  ACTION_REASON_OPEN_WORLD_BOSS_CHEST = 52;
  ACTION_REASON_MATERIAL_DELETE_RETURN = 53;
  ACTION_REASON_SIGN_IN_REWARD = 54;
  ACTION_REASON_OPEN_BLOSSOM_CHEST = 55;
  ACTION_REASON_RECHARGE = 56;
  ACTION_REASON_BONUS_ACTIVITY_REWARD = 57;
  ACTION_REASON_TOWER_COMMEMORATIVE_REWARD = 58;
  ACTION_REASON_TOWER_SKIP_FLOOR_REWARD = 59;
  ACTION_REASON_RECHARGE_BONUS = 60;
  ACTION_REASON_RECHARGE_CARD = 61;
  ACTION_REASON_RECHARGE_CARD_DAILY = 62;
  ACTION_REASON_RECHARGE_CARD_REPLACE = 63;
  ACTION_REASON_RECHARGE_CARD_REPLACE_FREE = 64;
  ACTION_REASON_RECHARGE_PLAY_REPLACE = 65;
  ACTION_REASON_MP_PLAY_TAKE_REWARD = 66;
  ACTION_REASON_ACTIVITY_WATCHER = 67;
  ACTION_REASON_SALESMAN_DELIVER_ITEM = 68;
  ACTION_REASON_SALESMAN_REWARD = 69;
  ACTION_REASON_REBATE = 70;
  ACTION_REASON_MCOIN_EXCHANGE_HCOIN = 71;
  ACTION_REASON_DAILY_TASK_EXCHANGE_LEGENDARY_KEY = 72;
  ACTION_REASON_UNLOCK_PERSON_LINE = 73;
  ACTION_REASON_FETTER_LEVEL_REWARD = 74;
  ACTION_REASON_BUY_RESIN = 75;
  ACTION_REASON_RECHARGE_PACKAGE = 76;
  ACTION_REASON_DELIVERY_DAILY_REWARD = 77;
  ACTION_REASON_CITY_REPUTATION_LEVEL = 78;
  ACTION_REASON_CITY_REPUTATION_QUEST = 79;
  ACTION_REASON_CITY_REPUTATION_REQUEST = 80;
  ACTION_REASON_CITY_REPUTATION_EXPLORE = 81;
  ACTION_REASON_OFFERGING_LEVEL = 82;
  ACTION_REASON_ROUTINE_HOST = 83;
  ACTION_REASON_ROUTINE_GUEST = 84;
  ACTION_REASON_TREASURE_MAP_SPOT_TOKEN = 89;
  ACTION_REASON_TREASURE_MAP_BONUS_LEVEL_REWARD = 90;
  ACTION_REASON_TREASURE_MAP_MP_REWARD = 91;
  ACTION_REASON_CONVERT = 92;
  ACTION_REASON_OVERFLOW_TRANSFORM = 93;
  ACTION_REASON_ACTIVITY_AVATAR_SELECTION_REWARD = 96;
  ACTION_REASON_ACTIVITY_WATCHER_BATCH = 97;
  ACTION_REASON_HIT_TREE_DROP = 98;
  ACTION_REASON_GET_HOME_LEVELUP_REWARD = 99;
  ACTION_REASON_HOME_DEFAULT_FURNITURE = 100;
  ACTION_REASON_ACTIVITY_COND = 101;
  ACTION_REASON_BATTLE_PASS_NOTIFY = 102;
  ACTION_REASON_RELIQUARY_DECOMPOSE = 103;
  ACTION_REASON_RECHARGE_GOOGLE_GIFT_GARD = 104;
  ACTION_REASON_RECHARGE_CONCERT_PRODUCT = 105;
  ACTION_REASON_RECHARGE_CONCERT_PRODUCT_REPLACE = 106;
  ACTION_REASON_SEND_CONCERT_PRODUCT_BY_MUIP = 107;
  ACTION_REASON_RECHARGE_APPLE_GIFT_GARD = 108;
  ACTION_REASON_RECHARGE_PSN_COMPENSATION_PRODUCT = 109;
  ACTION_REASON_COMPOUND_BOOST = 110;
  ACTION_REASON_WOOD_EXCHANGE = 111;
  ACTION_REASON_AVATAR_RENAME_AUDIT_FAILED = 112;
  ACTION_REASON_AVATAR_RENAME_RESET = 113;
  ACTION_REASON_PLAYER_USE_ITEM = 1001;
  ACTION_REASON_DROP_ITEM = 1002;
  ACTION_REASON_WEAPON_UPGRADE = 1011;
  ACTION_REASON_WEAPON_PROMOTE = 1012;
  ACTION_REASON_WEAPON_AWAKEN = 1013;
  ACTION_REASON_RELIC_UPGRADE = 1014;
  ACTION_REASON_ABILITY = 1015;
  ACTION_REASON_DUNGEON_STATUE_DROP = 1016;
  ACTION_REASON_OFFLINE_MSG = 1017;
  ACTION_REASON_AVATAR_UPGRADE = 1018;
  ACTION_REASON_AVATAR_PROMOTE = 1019;
  ACTION_REASON_QUEST_ACTION = 1021;
  ACTION_REASON_CITY_LEVELUP = 1022;
  ACTION_REASON_UPGRADE_SKILL = 1024;
  ACTION_REASON_UNLOCK_TALENT = 1025;
  ACTION_REASON_UPGRADE_PROUD_SKILL = 1026;
  ACTION_REASON_PLAYER_LEVEL_LIMIT_UP = 1027;
  ACTION_REASON_DUNGEON_DAILY = 1028;
  ACTION_REASON_ITEM_GIVING = 1030;
  ACTION_REASON_FORGE_COST = 1031;
  ACTION_REASON_INVESTIGATION_REWARD = 1032;
  ACTION_REASON_INVESTIGATION_TARGET_REWARD = 1033;
  ACTION_REASON_GADGET_INTERACT = 1034;
  ACTION_REASON_SEA_LAMP_CI_MATERIAL = 1036;
  ACTION_REASON_SEA_LAMP_CONTRIBUTION_REWARD = 1037;
  ACTION_REASON_SEA_LAMP_PHASE_REWARD = 1038;
  ACTION_REASON_SEA_LAMP_FLY_LAMP = 1039;
  ACTION_REASON_AUTO_RECOVER = 1040;
  ACTION_REASON_ACTIVITY_EXPIRE_ITEM = 1041;
  ACTION_REASON_SUB_COIN_NEGATIVE = 1042;
  ACTION_REASON_BARGAIN_DEDUCT = 1043;
  ACTION_REASON_BATTLE_PASS_PAID_REWARD = 1044;
  ACTION_REASON_BATTLE_PASS_LEVEL_REWARD = 1045;
  ACTION_REASON_TRIAL_AVATAR_ACTIVITY_FIRST_PASS_REWARD = 1046;
  ACTION_REASON_BUY_BATTLE_PASS_LEVEL = 1047;
  ACTION_REASON_GRANT_BIRTHDAY_BENEFIT = 1048;
  ACTION_REASON_ACHIEVEMENT_REWARD = 1049;
  ACTION_REASON_ACHIEVEMENT_GOAL_REWARD = 1050;
  ACTION_REASON_FIRST_SHARE_TO_SOCIAL_NETWORK = 1051;
  ACTION_REASON_DESTROY_MATERIAL = 1052;
  ACTION_REASON_CODEX_LEVELUP_REWARD = 1053;
  ACTION_REASON_HUNTING_OFFER_REWARD = 1054;
  ACTION_REASON_USE_WIDGET_ANCHOR_POINT = 1055;
  ACTION_REASON_USE_WIDGET_BONFIRE = 1056;
  ACTION_REASON_UNGRADE_WEAPON_RETURN_MATERIAL = 1057;
  ACTION_REASON_USE_WIDGET_ONEOFF_GATHER_POINT_DETECTOR = 1058;
  ACTION_REASON_USE_WIDGET_CLIENT_COLLECTOR = 1059;
  ACTION_REASON_USE_WIDGET_CLIENT_DETECTOR = 1060;
  ACTION_REASON_TAKE_GENERAL_REWARD = 1061;
  ACTION_REASON_ASTER_TAKE_SPECIAL_REWARD = 1062;
  ACTION_REASON_REMOVE_CODEX_BOOK = 1063;
  ACTION_REASON_OFFERING_ITEM = 1064;
  ACTION_REASON_USE_WIDGET_GADGET_BUILDER = 1065;
  ACTION_REASON_EFFIGY_FIRST_PASS_REWARD = 1066;
  ACTION_REASON_EFFIGY_REWARD = 1067;
  ACTION_REASON_REUNION_FIRST_GIFT_REWARD = 1068;
  ACTION_REASON_REUNION_SIGN_IN_REWARD = 1069;
  ACTION_REASON_REUNION_WATCHER_REWARD = 1070;
  ACTION_REASON_SALESMAN_MP_REWARD = 1071;
  ACTION_REASION_AVATAR_PROMOTE_REWARD = 1072;
  ACTION_REASON_BLESSING_REDEEM_REWARD = 1073;
  ACTION_MIRACLE_RING_REWARD = 1074;
  ACTION_REASON_EXPEDITION_REWARD = 1075;
  ACTION_REASON_TREASURE_MAP_REMOVE_DETECTOR = 1076;
  ACTION_REASON_MECHANICUS_DUNGEON_TICKET = 1077;
  ACTION_REASON_MECHANICUS_LEVELUP_GEAR = 1078;
  ACTION_REASON_MECHANICUS_BATTLE_SETTLE = 1079;
  ACTION_REASON_REGION_SEARCH_REWARD = 1080;
  ACTION_REASON_UNLOCK_COOP_CHAPTER = 1081;
  ACTION_REASON_TAKE_COOP_REWARD = 1082;
  ACTION_REASON_FLEUR_FAIR_DUNGEON_REWARD = 1083;
  ACTION_REASON_ACTIVITY_SCORE = 1084;
  ACTION_REASON_CHANNELLER_SLAB_ONEOFF_DUNGEON_REWARD = 1085;
  ACTION_REASON_FURNITURE_MAKE_START = 1086;
  ACTION_REASON_FURNITURE_MAKE_TAKE = 1087;
  ACTION_REASON_FURNITURE_MAKE_CANCEL = 1088;
  ACTION_REASON_FURNITURE_MAKE_FAST_FINISH = 1089;
  ACTION_REASON_CHANNELLER_SLAB_LOOP_DUNGEON_FIRST_PASS_REWARD = 1090;
  ACTION_REASON_CHANNELLER_SLAB_LOOP_DUNGEON_SCORE_REWARD = 1091;
  ACTION_REASON_HOME_LIMITED_SHOP_BUY = 1092;
  ACTION_REASON_HOME_COIN_COLLECT = 1093;
  ACTION_REASON_SUMMER_TIME_SENTRY_TOWER_REWARD = 1094;
  ACTION_REASON_SUMMER_TIME_SPRINT_BOAT_REWARD = 1095;
  ACTION_REASON_SUMMER_TIME_BOSS_REWARD = 1096;
  ACTION_REASON_SUMMER_TIME_BOMB_REWARD = 1097;
  ACTION_REASON_HOME_FETTER_COLLECT = 1098;
  ACTION_REASON_ECHO_SHELL_REWARD = 1099;
  ACTION_REASON_HOME_EVENT_REWARD = 1100;
  ACTION_REASON_BLITZ_RUSH_DUNGEON_REWARD = 1101;
  ACTION_REASON_FURNITURE_MAKE_RETURN = 1102;
  ACTION_REASON_HOME_PLANT_BOX_GATHER = 1103;
  ACTION_REASON_HOME_PLANT_SEED = 1104;
  ACTION_REASON_HOME_PLANT_GATHER = 1105;
  ACTION_REASON_CHESS_DUNGEON_REWARD = 1106;
  ACTION_REASON_GROUP_LINK_BUNDLE_FINISH = 1107;
  ACTION_REASON_LUNA_RITE_SACRIFICE = 1108;
  ACTION_REASON_LUNA_RITE_TAKE_SACRIFICE_REWARD = 1109;
  ACTION_REASON_FISH_BITE = 1110;
  ACTION_REASON_FISH_SUCC = 1111;
  ACTION_REASON_PLANT_FLOWER_REWARD = 1112;
  ACTION_REASON_PLANT_FLOWER_DELIVER_ITEM = 1113;
  ACTION_REASON_PLANT_FLOWER_GIVE_FLOWER = 1114;
  ACTION_REASON_PLANT_FLOWER_RECV_FLOWER = 1115;
  ACTION_REASON_ROGUE_CHALLENGE_SETTLE = 1116;
  ACTION_REASON_ROGUE_TAKE_FIRST_PASS_REWARD = 1117;
  ACTION_REASON_ROGUE_UPGRADE_SHIKIGAMI = 1118;
  ACTION_REASON_ROGUE_REFRESH_CARD = 1119;
  ACTION_REASON_USE_WIDGET_CAPTURE_ANIMAL = 1120;
  ACTION_REASON_CAPTURE_ANIMAL_SUCC = 1121;
  ACTION_REASON_SNOW_DRIFTS = 1122;
  ACTION_REASON_WINTER_CAMP_GIVE_ITEM = 1123;
  ACTION_REASON_WINTER_CAMP_RECV_ITEM = 1124;
  ACTION_REASON_WINTER_CAMP_EXPLORE_REWARD = 1125;
  ACTION_REASON_WINTER_CAMP_BATTLE_REWARD = 1126;
  ACTION_REASON_LANTERN_RITE_SKIN_REWARD = 1127;
  ACTION_REASON_LANTERN_RITE_DUNGEON_REWARD = 1128;
  ACTION_REASON_MICHIAE_MATSURI_DARK_CHALLENGE_REWARD = 1129;
  ACTION_REASON_MICHIAE_MATSURI_UNLOCK_CRYSTAL_SKILL = 1130;
  ACTION_REASON_LANTERN_RITE_GROUP_REWARD = 1131;
  ACTION_REASON_COSTUME_DEFAULT_UNLOCK = 1132;
  ACTION_REASON_SPICE_ACTIVITY_MAKE_SPICE = 1133;
  ACTION_REASON_SPICE_ACTIVITY_PROCESS_FOOD = 1134;
  ACTION_REASON_SPICE_ADD_AVATAR_FETTER = 1135;
  ACTION_REASON_GACHA_ACTIVITY_ROBOT_REWARD = 1136;
  ACTION_REASON_GIVING_TAKE_BACK = 1137;
  ACTION_REASON_SUMMER_TIME_V2_DUNGEON_REWARD = 1138;
  ACTION_REASON_GRAVEN_INNOCENCE_CAMP_REWARD = 1139;
  ACTION_REASON_TREASURE_SEELIE_CHEST_REWARD = 1140;
  ACTION_REASON_GCG_TAVERN_CHALLENGE_UNLOCK_CHARACTER = 1141;
  ACTION_REASON_GCG_LEVEL_REWARD = 1143;
  ACTION_REASON_GCG_CHALLENGE_FINISH = 1144;
  ACTION_REASON_VINTAGE_MARKET_DEAL = 1145;
  ACTION_REASON_VINTAGE_MARKET_BARGAIN = 1146;
  ACTION_REASON_VINTAGE_MARKET_STORE = 1147;
  ACTION_REASON_VINTAGE_PRESENT = 1148;
  ACTION_REASON_VINTAGE_OPEN_STORE = 1149;
  ACTION_REASON_VINTAGE_STORE_UNLOCK_SLOT = 1150;
  ACTION_REASON_VINTAGE_STORE_NPC_EVENT = 1151;
  ACTION_REASON_ROCK_BOARD_EXPLORE_REWARD = 1152;
  ACTION_REASON_VINTAGE_STORE_DIVIDEND = 1153;
  ACTION_REASON_AVATAR_RENAME = 1154;
  ACTION_REASON_GCG_FINISH_LEVEL_QUEST = 1155;
  ACTION_REASON_GCG_PROFICIENCY_REWARD = 1156;
  ACTION_REASON_TEAM_CHAIN_COSTUME_REWARD = 1157;
}

enum StoreType {
  STORE_NONE = 0;
  STORE_PACK = 1;
  STORE_DEPOT = 2;
}

enum VirtualItem {
  ITEM_VIRTUAL_NONE = 0;
  ITEM_VIRTUAL_AVATAR_EXP = 101;
  ITEM_VIRTUAL_PLAYER_EXP = 102;
  ITEM_VIRTUAL_FETTER_EXP = 105;
  ITEM_VIRTUAL_RESIN = 106;
  ITEM_VIRTUAL_LEGENDARY_KEY = 107;
  ITEM_VIRTUAL_ASTER_PROGRESS = 108;
  ITEM_VIRTUAL_ASTER_CREDIT = 109;
  ITEM_VIRTUAL_ASTER_TOKEN = 110;
  ITEM_VIRTUAL_SHIMMERING_ESSENCE = 111;
  ITEM_VIRTUAL_WARM_ESSENCE = 112;
  ITEM_VIRTUAL_WONDROUS_ESSENCE = 113;
  ITEM_VIRTUAL_TREASURE_MAP_TOKEN = 114;
  ITEM_VIRTUAL_SEA_LAMP_COIN = 115;
  ITEM_VIRTUAL_SEA_LAMP_POPULARITY = 116;
  ITEM_VIRTUAL_MECHANICUS_COIN = 117;
  ITEM_VIRTUAL_FLEUR_FAIR_CREDIT = 118;
  ITEM_VIRTUAL_FLEUR_FAIR_TOKEN = 119;
  ITEM_VIRTUAL_WATER_SPIRIT_COIN = 120;
  ITEM_VIRTUAL_HOME_EXP = 121;
  ITEM_VIRTUAL_CHANNELLER_SLAB_TOKEN = 122;
  ITEM_VIRTUAL_HIDE_AND_SEEK_COIN = 123;
  ITEM_VIRTUAL_SUMMER_TIME_DRAFT_WOOD = 124;
  ITEM_VIRTUAL_SUMMER_TIME_MINI_HARPASTUM = 125;
  ITEM_VIRTUAL_BOUNCE_CONJURING_COIN = 126;
  ITEM_VIRTUAL_BLITZ_RUSH_COIN_A = 127;
  ITEM_VIRTUAL_BLITZ_RUSH_COIN_B = 128;
  ITEM_VIRTUAL_CHESS_EXP = 129;
  ITEM_VIRTUAL_CHESS_COIN = 130;
  ITEM_VIRTUAL_LUNA_RITE_ATMOSPHERE = 131;
  ITEM_VIRTUAL_ROGUELIKE_COIN_A = 132;
  ITEM_VIRTUAL_ROGUELIKE_COIN_B = 133;
  ITEM_VIRTUAL_ROGUELIKE_COIN_C = 134;
  ITEM_VIRTUAL_WINTER_CAMP_COIN_A = 135;
  ITEM_VIRTUAL_WINTER_CAMP_COIN_B = 136;
  ITEM_VIRTUAL_LANTERN_RITE_COIN_A = 137;
  ITEM_VIRTUAL_LANTERN_RITE_COIN_B = 138;
  ITEM_VIRTUAL_LANTERN_RITE_COIN_C = 139;
  ITEM_VIRTUAL_ROGUE_DIARY_COIN = 140;
  ITEM_VIRTUAL_SUMMER_TIME_V2_COIN = 141;
  ITEM_VIRTUAL_ROGUE_DIARY_DUNGEON_COIN = 142;
  ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_A = 143;
  ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_B = 144;
  ITEM_VIRTUAL_TREASURE_SEELIE_COIN = 145;
  ITEM_VIRTUAL_VINTAGE_POPULARITY = 147;
  ITEM_VIRTUAL_GCG_EXP = 146;
  ITEM_VIRTUAL_VINTAGE_MARKET_COIN_A = 148;
  ITEM_VIRTUAL_VINTAGE_MARKET_COIN_B = 149;
  ITEM_VIRTUAL_VINTAGE_MARKET_COIN_C = 150;
  ITEM_VIRTUAL_FUNGUS_FIGHTER_CAPTURE_COIN = 151;
  ITEM_VIRTUAL_FUNGUS_FIGHTER_TRAINING_COIN = 152;
  ITEM_VIRTUAL_EFFIGY_CHALLENGE_V2_COIN = 153;
  ITEM_VIRTUAL_TEAM_CHAIN_COIN = 154;
  ITEM_VIRTUAL_BRICK_BREAKER_COIN = 155;
  ITEM_VIRTUAL_SEA_LAMP_V3_COIN = 156;
  ITEM_VIRTUAL_HCOIN = 201;
  ITEM_VIRTUAL_SCOIN = 202;
  ITEM_VIRTUAL_MCOIN = 203;
  ITEM_VIRTUAL_HOME_COIN = 204;
  ITEM_VIRTUAL_GCG_COIN = 205;
  ITEM_VIRTUAL_INAZUMA_REPUTATION = 314;
  ITEM_VIRTUAL_MENGDE_REPUTATION = 315;
  ITEM_VIRTUAL_SUMERU_REPUTATION = 316;
  ITEM_VIRTUAL_LIYUE_REPUTATION = 317;
}

enum ReliquaryFilterKey {
  RELIQUARY_FILTER_KEY_NONE = 0;
  RELIQUARY_FILTER_KEY_LOCK = 1;
  RELIQUARY_FILTER_KEY_LEVEL = 2;
  RELIQUARY_FILTER_KEY_WEARING = 3;
}

enum ReliquaryFilterLockState {
  RELIQUARY_FILTER_LOCK_STATE_NONE = 0;
  RELIQUARY_FILTER_LOCK_STATE_LOCK = 1;
  RELIQUARY_FILTER_LOCK_STATE_UNLOCK = 2;
}

enum ReliquaryFilterLevelState {
  RELIQUARY_FILTER_LEVEL_STATE_NONE = 0;
  RELIQUARY_FILTER_LEVEL_STATE_FULL_LEVEL = 1;
  RELIQUARY_FILTER_LEVEL_STATE_NOT_FULL_LEVEL = 2;
}

enum ReliquaryFilterWearedState {
  RELIQUARY_FILTER_WEARED_STATE_NONE = 0;
  RELIQUARY_FILTER_WEARED_STATE_HAS_BEEN_WEARED = 1;
  RELIQUARY_FILTER_WEARED_STATE_HAS_NOT_BEEN_WEARED = 2;
}

enum AbilityScalarType {
  ABILITY_SCALAR_TYPE_UNKNOW = 0;
  ABILITY_SCALAR_TYPE_FLOAT = 1;
  ABILITY_SCALAR_TYPE_INT = 2;
  ABILITY_SCALAR_TYPE_BOOL = 3;
  ABILITY_SCALAR_TYPE_TRIGGER = 4;
  ABILITY_SCALAR_TYPE_STRING = 5;
  ABILITY_SCALAR_TYPE_UINT = 6;
}

enum MotionState {
  MOTION_NONE = 0;
  MOTION_RESET = 1;
  MOTION_STANDBY = 2;
  MOTION_STANDBY_MOVE = 3;
  MOTION_WALK = 4;
  MOTION_RUN = 5;
  MOTION_DASH = 6;
  MOTION_CLIMB = 7;
  MOTION_CLIMB_JUMP = 8;
  MOTION_STANDBY_TO_CLIMB = 9;
  MOTION_FIGHT = 10;
  MOTION_JUMP = 11;
  MOTION_DROP = 12;
  MOTION_FLY = 13;
  MOTION_SWIM_MOVE = 14;
  MOTION_SWIM_IDLE = 15;
  MOTION_SWIM_DASH = 16;
  MOTION_SWIM_JUMP = 17;
  MOTION_SLIP = 18;
  MOTION_GO_UPSTAIRS = 19;
  MOTION_FALL_ON_GROUND = 20;
  MOTION_JUMP_UP_WALL_FOR_STANDBY = 21;
  MOTION_JUMP_OFF_WALL = 22;
  MOTION_POWERED_FLY = 23;
  MOTION_LADDER_IDLE = 24;
  MOTION_LADDER_MOVE = 25;
  MOTION_LADDER_SLIP = 26;
  MOTION_STANDBY_TO_LADDER = 27;
  MOTION_LADDER_TO_STANDBY = 28;
  MOTION_DANGER_STANDBY = 29;
  MOTION_DANGER_STANDBY_MOVE = 30;
  MOTION_DANGER_WALK = 31;
  MOTION_DANGER_RUN = 32;
  MOTION_DANGER_DASH = 33;
  MOTION_CROUCH_IDLE = 34;
  MOTION_CROUCH_MOVE = 35;
  MOTION_CROUCH_ROLL = 36;
  MOTION_NOTIFY = 37;
  MOTION_LAND_SPEED = 38;
  MOTION_MOVE_FAIL_ACK = 39;
  MOTION_WATERFALL = 40;
  MOTION_DASH_BEFORE_SHAKE = 41;
  MOTION_SIT_IDLE = 42;
  MOTION_FORCE_SET_POS = 43;
  MOTION_QUEST_FORCE_DRAG = 44;
  MOTION_FOLLOW_ROUTE = 45;
  MOTION_SKIFF_BOARDING = 46;
  MOTION_SKIFF_NORMAL = 47;
  MOTION_SKIFF_DASH = 48;
  MOTION_SKIFF_POWERED_DASH = 49;
  MOTION_DESTROY_VEHICLE = 50;
  MOTION_FLY_IDLE = 51;
  MOTION_FLY_SLOW = 52;
  MOTION_FLY_FAST = 53;
  MOTION_AIM_MOVE = 54;
  MOTION_AIR_COMPENSATION = 55;
  MOTION_NUM = 56;
}

enum ProtEntityType {
  PROT_ENTITY_NONE = 0;
  PROT_ENTITY_AVATAR = 1;
  PROT_ENTITY_MONSTER = 2;
  PROT_ENTITY_NPC = 3;
  PROT_ENTITY_GADGET = 4;
  PROT_ENTITY_REGION = 5;
  PROT_ENTITY_WEAPON = 6;
  PROT_ENTITY_WEATHER = 7;
  PROT_ENTITY_SCENE = 8;
  PROT_ENTITY_TEAM = 9;
  PROT_ENTITY_MASSIVE_ENTITY = 10;
  PROT_ENTITY_MP_LEVEL = 11;
  PROT_ENTITY_PLAY_TEAM_ENTITY = 12;
  PROT_ENTITY_EYE_POINT = 13;
  PROT_ENTITY_MAX = 14;
}

enum NpcTalkState {
  NPC_TALK_NONE = 0;
  NPC_TALK_AUTO = 1;
  NPC_TALK_MANUAL = 2;
}

enum VehicleSlot {
  VEHICLE_SLOT_OPERATOR = 0;
}

enum MonsterBornType {
  MONSTER_BORN_NONE = 0;
  MONSTER_BORN_DEFAULT = 1;
  MONSTER_BORN_RANDOM = 2;
}

enum GadgetBornType {
  GADGET_BORN_NONE = 0;
  GADGET_BORN_IN_AIR = 1;
  GADGET_BORN_PLAYER = 2;
  GADGET_BORN_MONSTER_HIT = 3;
  GADGET_BORN_MONSTER_DIE = 4;
  GADGET_BORN_GADGET = 5;
  GADGET_BORN_GROUND = 6;
}

enum MovingPlatformType {
  MOVING_PLATFORM_NONE = 0;
  MOVING_PLATFORM_USE_CONFIG = 1;
  MOVING_PLATFORM_ABILITY = 2;
  MOVING_PLATFORM_ROUTE = 3;
}

enum GadgetPlayType {
  GADGET_PLAY_NONE = 0;
  GADGET_PLAY_CRUSIBLE = 1;
}

enum FoundationStatus {
  FOUNDATION_STATUS_NONE = 0;
  FOUNDATION_STATUS_INIT = 1;
  FOUNDATION_STATUS_BUILDING = 2;
  FOUNDATION_STATUS_BUILT = 3;
}

enum ChangHpReason {
  CHANGE_HP_NONE = 0;
  CHANGE_HP_SUB_AVATAR = 1;
  CHANGE_HP_SUB_MONSTER = 2;
  CHANGE_HP_SUB_GEAR = 3;
  CHANGE_HP_SUB_ENVIR = 4;
  CHANGE_HP_SUB_FALL = 5;
  CHANGE_HP_SUB_DRAWN = 6;
  CHANGE_HP_SUB_ABYSS = 7;
  CHANGE_HP_SUB_ABILITY = 8;
  CHANGE_HP_SUB_SUMMON = 9;
  CHANGE_HP_SUB_SCRIPT = 10;
  CHANGE_HP_SUB_GM = 11;
  CHANGE_HP_SUB_KILL_SELF = 12;
  CHANGE_HP_SUB_CLIMATE_COLD = 13;
  CHANGE_HP_SUB_STORM_LIGHTNING = 14;
  CHANGE_HP_SUB_KILL_SERVER_GADGET = 15;
  CHANGE_HP_SUB_REPLACE = 16;
  CHANGE_HP_SUB_PLAYER_LEAVE = 17;
  CHANGE_HP_ATTACK_BY_ENERGY = 18;
  CHANGE_HP_ATTACK_BY_RECYCLE = 19;
  CHANGE_HP_BY_LUA = 51;
  CHANGE_HP_ADD_ABILITY = 101;
  CHANGE_HP_ADD_ITEM = 102;
  CHANGE_HP_ADD_REVIVE = 103;
  CHANGE_HP_ADD_UPGRADE = 104;
  CHANGE_HP_ADD_STATUE = 105;
  CHANGE_HP_ADD_BACKGROUND = 106;
  CHANGE_HP_ADD_GM = 107;
  CHANGE_HP_ADD_TRIAL_AVATAR_ACTIVITY = 108;
  CHANGE_HP_ADD_ROUGUELIKE_SPRING = 109;
}

enum PlayerDieType {
  PLAYER_DIE_NONE = 0;
  PLAYER_DIE_KILL_BY_MONSTER = 1;
  PLAYER_DIE_KILL_BY_GEAR = 2;
  PLAYER_DIE_FALL = 3;
  PLAYER_DIE_DRAWN = 4;
  PLAYER_DIE_ABYSS = 5;
  PLAYER_DIE_GM = 6;
  PLAYER_DIE_CLIMATE_COLD = 7;
  PLAYER_DIE_STORM_LIGHTING = 8;
}

enum PlayerDieOption {
  DIE_OPT_NONE = 0;
  DIE_OPT_REPLAY = 1;
  DIE_OPT_CANCEL = 2;
  DIE_OPT_REVIVE = 3;
}

enum FetterState {
  FETTER_STATE_NONE = 0;
  FETTER_STATE_NOT_OPEN = 1;
  FETTER_STATE_OPEN = 2;
  FETTER_STATE_FINISH = 3;
  FETTER_STATE_CONCEAL = 4;
}

enum AvatarExpeditionState {
  AVATAR_EXPEDITION_NONE = 0;
  AVATAR_EXPEDITION_DOING = 1;
  AVATAR_EXPEDITION_FINISH_WAIT_REWARD = 2;
  AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD = 3;
  AVATAR_EXPEDITION_LOCKED = 4;
}

enum AvatarType {
  AVATAR_TYPE_NONE = 0;
  AVATAR_TYPE_FORMAL = 1;
  AVATAR_TYPE_TRIAL = 2;
  AVATAR_TYPE_MIRROR = 3;
}

enum EventTriggerType {
  EVENT_TRIGGER_NONE = 0;
  EVENT_TRIGGER_ENTER_FORCE = 1;
}

enum MailCollectState {
  MAIL_COLLECTIBLE_UNKONW = 0;
  MAIL_NOT_COLLECTIBLE = 1;
  MAIL_COLLECTIBLE_UNCOLLECTED = 2;
  MAIL_COLLECTIBLE_COLLECTED = 3;
}

enum MpSettingType {
  MP_SETTING_NO_ENTER = 0;
  MP_SETTING_ENTER_FREELY = 1;
  MP_SETTING_ENTER_AFTER_APPLY = 2;
}

enum MathExpressionType {
  MATH_EXPR_NONE = 0;
  MATH_EXPR_LEVEL = 1;
  MATH_EXPR_REGISTER_TIME = 2;
  MATH_EXPR_LAST_LOGIN_TIME = 3;
  MATH_EXPR_TOTAL_LOGIN_DAYS = 4;
  MATH_EXPR_PLATFORM = 5;
}

enum LoginRewardConfigType {
  LOGIN_REWARD_IMMEDIDATE = 0;
  LOGIN_REWARD_FIRST = 1;
}

enum LanguageType {
  LANGUAGE_NONE = 0;
  LANGUAGE_EN = 1;
  LANGUAGE_SC = 2;
  LANGUAGE_TC = 3;
  LANGUAGE_FR = 4;
  LANGUAGE_DE = 5;
  LANGUAGE_ES = 6;
  LANGUAGE_PT = 7;
  LANGUAGE_RU = 8;
  LANGUAGE_JP = 9;
  LANGUAGE_KR = 10;
  LANGUAGE_TH = 11;
  LANGUAGE_VN = 12;
  LANGUAGE_ID = 13;
  LANGUAGE_TR = 14;
  LANGUAGE_IT = 15;
}

enum PlatformType {
  EDITOR = 0;
  IOS = 1;
  ANDROID = 2;
  PC = 3;
  PS4 = 4;
  SERVER = 5;
  CLOUD_ANDROID = 6;
  CLOUD_IOS = 7;
  PS5 = 8;
  CLOUD_WEB = 9;
  CLOUD_TV = 10;
  CLOUD_MAC = 11;
  CLOUD_PC = 12;
  CLOUD_THIRD_PARTY_MOBILE = 13;
  CLOUD_THIRD_PARTY_PC = 14;
}

enum MapMarkPointType {
  NPC = 0;
  QUEST = 1;
  SPECIAL = 2;
  MINE = 3;
  COLLECTION = 4;
  MONSTER = 5;
  FISH_POOL = 6;
}

enum MapMarkFromType {
  MAP_MARK_FROM_TYPE_NOE = 0;
  MAP_MARK_FROM_TYPE_MONSTER = 1;
  MAP_MARK_FROM_TYPE_QUEST = 2;
}

enum DungeonCandidateTeamInviteState {
  DUNGEON_CANDIDATE_TEAM_INVITE_STATE_NONE = 0;
  DUNGEON_CANDIDATE_TEAM_INVITE_STATE_SEND = 1;
  DUNGEON_CANDIDATE_TEAM_INVITE_STATE_ACCEPT = 2;
  DUNGEON_CANDIDATE_TEAM_INVITE_STATE_REFUSE = 3;
}

enum MonsterGuestBanDrop {
  MONSTER_GUEST_BAN_NONE = 0;
  MONSTER_GUEST_BAN_DIE_EXP = 1;
  MONSTER_GUEST_BAN_DIE_LUA = 2;
  MONSTER_GUEST_BAN_DIE_EXCEL = 4;
  MONSTER_GUEST_BAN_DIE_ACTIVITY = 8;
  MONSTER_GUEST_BAN_DROP_HP = 16;
  MONSTER_GUEST_BAN_SUBFIELD = 32;
}

enum GadgetGuestBanDrop {
  GADGET_GUEST_BAN_NONE = 0;
  GADGET_GUEST_BAN_DIE_LUA = 1;
  GADGET_GUEST_BAN_SUBFIELD = 2;
}

enum GroupLoadStrategy {
  GROUP_LOAD_NONE = 0;
  GROUP_LOAD_SINGLE = 1;
  GROUP_LOAD_MULTI = 2;
  GROUP_LOAD_ALL = 3;
}

enum MatchType {
  MATCH_TYPE_NONE = 0;
  MATCH_TYPE_DUNGEON = 1;
  MATCH_TYPE_MP_PLAY = 2;
  MATCH_TYPE_MECHANICUS = 3;
  MATCH_TYPE_GENERAL = 4;
  MATCH_TYPE_GCG = 5;
}

enum MpPlayType {
  MP_PLAY_NONE = 0;
  MP_PLAY_DUNGEON = 1;
  MP_PLAY_CRUCIBLE = 2;
}

enum OpActivityType {
  OP_ACTIVITY_NONE = 0;
  OP_ACTIVITY_SIGN_IN = 1;
  OP_ACTIVITY_BONUS = 2;
  OP_ACTIVITY_TRAVEL_BUSINESS = 3;
  OP_ACTIVITY_CRUCIBLE = 4;
}

enum MatchReason {
  MATCH_NONE = 0;
  MATCH_FINISH = 1;
  MATCH_PLAYER_CANCEL = 2;
  MATCH_TIMEOUT = 3;
  MATCH_PLAYER_CONFIRM = 4;
  MATCH_FAILED = 5;
  MATCH_SYSTEM_ERROR = 6;
  MATCH_INTERRUPTED = 7;
  MATCH_MP_UNAVAILABLE = 8;
  MATCH_CONFIRM_TIMEOUT = 9;
}

enum LuaShellNotifyType {
  LUASHELL_NOTIFY = 0;
  LUASHELL_HIDE = 1;
}

enum LuaShellType {
  LUASHELL_NONE = 0;
  LUASHELL_NORMAL = 1;
  LUASHELL_SECURITY = 2;
  LUASHELL_SHELL_CODE = 3;
}

enum SalesmanStatusType {
  SALESMAN_STATUS_NONE = 0;
  SALESMAN_STATUS_UNSTARTED = 1;
  SALESMAN_STATUS_STARTED = 2;
  SALESMAN_STATUS_DELIVERED = 3;
}

enum SecurityCheckType {
  SECURITY_CHECK_NONE = 0;
  SECURITY_CHECK_LOGIN = 1;
}

enum CodexType {
  CODEX_NONE = 0;
  CODEX_QUEST = 1;
  CODEX_WEAPON = 2;
  CODEX_ANIMAL = 3;
  CODEX_MATERIAL = 4;
  CODEX_BOOKS = 5;
  CODEX_PUSHTIPS = 6;
  CODEX_VIEW = 7;
  CODEX_RELIQUARY = 8;
}

enum SegmentCRCModuleType {
  MODULE_NONE = 0;
  PC_UNITYPLAYER = 1;
  PC_USERASSEMBLY = 2;
  PC_XLUA = 3;
  ANDROID_LIBIL2CPP = 11;
  ANDROID_LIBUNITY = 12;
  ANDROID_LIBXLUA = 13;
  IOS_HK4E = 21;
}

enum ExchangeMcoinType {
  EXCHANGEMCOIN_NONE = 0;
  EXCHANGEMCOIN_PCM_TO_PSN = 1;
  EXCHANGEMCOIN_PSN_TO_PCM = 2;
}

enum ExploreType {
  EXPLORE_NONE = 0;
  EXPLORE_CRYSTAL = 1;
  EXPLORE_CHEST = 2;
  EXPLORE_TEMPLE = 3;
  EXPLORE_TELEPORT = 4;
}

enum AsterLittleStageState {
  ASTER_LITTLE_STAGE_NONE = 0;
  ASTER_LITTLE_STAGE_UNSTARTED = 1;
  ASTER_LITTLE_STAGE_STARTED = 2;
  ASTER_LITTLE_STAGE_FINISHED = 3;
}

enum HuntingOfferState {
  HUNTING_OFFER_STATE_NONE = 0;
  HUNTING_OFFER_STATE_STARTED = 1;
  HUNTING_OFFER_STATE_UNSTARTED = 2;
  HUNTING_OFFER_STATE_SUCC = 3;
}

enum RegionSearchState {
  REGION_SEARCH_NONE = 0;
  REGION_SEARCH_UNSTARTED = 1;
  REGION_SEARCH_STARTED = 2;
  REGION_SEARCH_WAIT_REWARD = 3;
  REGION_SEARCH_FINISHED = 4;
}

enum PlayerTag {
  PLAYER_TAG_NORMAL = 0;
  PLAYER_TAG_SUB_ACCOUNT = 3;
  PLAYER_TAG_SUB_ACCOUNT_TRANS_TO_NORMAL = 5;
}

enum FeatureBlockType {
  FEATURE_BLOCK_TYPE_NONE = 0;
  FEATURE_BLOCK_TYPE_CHAT = 1;
  FEATURE_BLOCK_TYPE_MP = 2;
  FEATRURE_BLOCK_TYPE_CRC = 3;
  FEATURE_BLOCK_TYPE_HOME = 4;
}

enum ReportReasonType {
  REPORT_REASON_NONE = 0;
  REPORT_REASON_DECEPTIVE_ADS = 1;
  REPORT_REASON_ABUSING = 2;
  REPORT_REASON_CHEAT = 3;
  REPORT_REASON_POLITICAL = 4;
  REPORT_REASON_OTHER = 5;
  REPORT_REASON_HOME = 6;
}

enum MapMarkTipsType {
  MARK_TIPS_DUNGEON_ELEMENT_TRIAL = 0;
}

enum ExpeditionState {
  EXPEDITION_NONE = 0;
  EXPEDITION_STARTED = 1;
  EXPEDITION_FINISHED = 2;
  EXPEDITION_REWARDED = 3;
  EXPEDITION_LOCKED = 4;
}

enum EnterReason {
  ENTER_REASON_NONE = 0;
  ENTER_REASON_LOGIN = 1;
  ENTER_REASON_DUNGEON_REPLAY = 11;
  ENTER_REASON_DUNGEON_REVIVE_ON_WAYPOINT = 12;
  ENTER_REASON_DUNGEON_ENTER = 13;
  ENTER_REASON_DUNGEON_QUIT = 14;
  ENTER_REASON_GM = 21;
  ENTER_REASON_QUEST_ROLLBACK = 31;
  ENTER_REASON_REVIVAL = 32;
  ENTER_REASON_PERSONAL_SCENE = 41;
  ENTER_REASON_TRANS_POINT = 42;
  ENTER_REASON_CLIENT_TRANSMIT = 43;
  ENTER_REASON_FORCE_DRAG_BACK = 44;
  ENTER_REASON_TEAM_KICK = 51;
  ENTER_REASON_TEAM_JOIN = 52;
  ENTER_REASON_TEAM_BACK = 53;
  ENTER_REASON_MUIP = 54;
  ENTER_REASON_DUNGEON_INVITE_ACCEPT = 55;
  ENTER_REASON_LUA = 56;
  ENTER_REASON_ACTIVITY_LOAD_TERRAIN = 57;
  ENTER_REASON_HOST_FROM_SINGLE_TO_MP = 58;
  ENTER_REASON_MP_PLAY = 59;
  ENTER_REASON_ANCHOR_POINT = 60;
  ENTER_REASON_LUA_SKIP_UI = 61;
  ENTER_REASON_RELOAD_TERRAIN = 62;
  ENTER_REASON_DRAFT_TRANSFER = 63;
  ENTER_REASON_ENTER_HOME = 64;
  ENTER_REASON_EXIT_HOME = 65;
  ENTER_REASON_CHANGE_HOME_MODULE = 66;
  ENTER_REASON_GALLERY = 67;
  ENTER_REASON_HOME_SCENE_JUMP = 68;
  ENTER_REASON_HIDE_AND_SEEK = 69;
  ENTER_REASON_SUMMER_TIME_MIST_ZONE = 70;
  ENTER_REASON_FORCE_QUIT_SCENE = 71;
  ENTER_REASON_HERO_COURSE = 72;
  ENTER_REASON_TRANS_CLIMATE = 73;
  ENTER_REASON_SUMMER_TIME_BOAT_RESTART = 74;
  ENTER_REASON_TSURUMI_MIST_CLIMATE = 75;
  ENTER_REASON_TSURUMI_REGIONAL_MIST_CLIMATE = 76;
  ENTER_REASON_WINTER_CAMP_RESTART = 77;
  ENTER_REASON_TALK_EXEC_TRANSFER = 78;
  ENTER_REASON_SEALAMP_BOAT_RESTART = 79;
  ENTER_REASON_SEALAMP_BOAT_BACK = 80;
  ENTER_REASON_CHALLENGE_INTERRUPT_BACK = 81;
  ENTER_REASON_IRODORI_MASTER_TRANSFER = 82;
  ENTER_REASON_GALLERY_BACK = 83;
  ENTER_REASON_SUMMER_TIME_V2_BOAT_RESTART = 84;
  ENTER_REASON_ISLAND_PARTY_GALLERY_START_FAILED = 85;
  ENTER_REASON_GRAVEN_INNOCENCE_RACE_RESTART = 86;
  ENTER_REASON_VINTAGE_HUNTING_TRANSFER = 87;
  ENTER_REASON_FUNGUS_FIGHTER_TRANSFER = 88;
  ENTER_REASON_BRICK_BREAKER = 89;
  ENTER_REASON_BRICK_BREAKER_SINGLE = 90;
  ENTER_REASON_TRANSFER_GUARD_STOP = 91;
  ENTER_REASON_COIN_COLLECT_SINGLE = 92;
  ENTER_REASON_LAN_V3_BOAT_TRANSFER = 93;
  ENTER_REASON_LAN_V3_RACE_RESTART = 94;
}

enum FriendEnterHomeOption {
  FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM = 0;
  FRIEND_ENTER_HOME_OPTION_REFUSE = 1;
  FRIEND_ENTER_HOME_OPTION_DIRECT = 2;
}

enum ChatChannel {
  CHANNEL_TEAM = 0;
  CHANNEL_FRIEND = 1;
  CHANNEL_NONE = 2;
  CHANNEL_HIDEANDSEEK = 3;
  CHANNEL_HIDEANDSEEK_TEAM = 5;
  CHANNEL_LAN_V3_BOAT = 6;
  CHANNEL_ALL = 10;
  CHANNEL_TEST = 100;
}

enum LeaveWorldReason {
  LEAVE_WORLD_REASON_NONE = 0;
  LEAVE_WORLD_REASON_LOGOUT = 1;
  LEAVE_WORLD_REASON_BACK_MY_WORLD = 2;
  LEAVE_WORLD_REASON_KICK_BY_OWNER = 3;
}

enum DungeonCandidateTeamPlayerState {
  DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_IDLE = 0;
  DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_CHANGING_AVATAR = 1;
  DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_READY = 2;
}

enum CreateGadgetReason {
  CREATE_GADGET_NONE = 0;
  CREATE_GADGET_PLAYER = 1;
  CREATE_GADGET_MISSION = 2;
  CREATE_GADGET_GM = 3;
}

enum LunaRiteHintStatusType {
  LUNA_RITE_HINT_STATUS_DEFAULT = 0;
  LUNA_RITE_HINT_STATUS_NO_COUNT = 1;
  LUNA_RITE_HINT_STATUS_FINISH = 2;
}

enum LunaRiteHintPointType {
  LUNA_RITE_HINT_TYPE_NONE = 0;
  LUNA_RITE_HINT_TYPE_RUNE = 1;
  LUNA_RITE_HINT_TYPE_CHEST = 2;
}

enum GroupVariableType {
  VARIABLE_TYPE_NORMAL = 0;
  VARIABLE_TYPE_LOGIC_STATE = 1;
}

enum ClientInputType {
  CLIENT_INPUT_NONE = 0;
  CLIENT_INPUT_KEYBORD_MOUSE = 1;
  CLIENT_INPUT_GAMEPAD = 2;
  CLIENT_INPUT_TOUCH_PANEL = 3;
}

enum CustomDungeonEvent {
  CUSTOM_DUNGEON_EVENT_NONE = 0;
  CUSTOM_DUNGEON_EVENT_OFFICIAL_RESTART = 1;
  CUSTOM_DUNGEON_EVENT_OUT_STUCK = 2;
}

enum PlatformCategory {
  PLATFORM_CATEGORY_NONE = 0;
  PLATFORM_CATEGORY_PCM = 1;
  PLATFORM_CATEGORY_PSN = 2;
}

enum SceneidConstValue {
  SCENEID_CONST_NONE = 0;
  SCENEID_CONST_MAIN = 3;
  SCENEID_CONST_ISLAND = 4;
  SCENEID_CONST_ENKANOMIYA = 5;
  SCENEID_CONST_MICHIAE_MATSURI = 7;
  SCENEID_CONST_28_ISLAND = 9;
}

enum CityidConstValue {
  CITYID_CONST_NONE = 0;
  CITYID_CONST_MENGDE = 1;
  CITYID_CONST_LIYUE = 2;
  CITYID_CONST_DAOQI = 3;
  CITYID_CONST_XUMI = 4;
}

enum AranaraCollectionState {
  ARANARA_COLLECTION_STATE_NONE = 0;
  ARANARA_COLLECTION_STATE_COLLECTABLE = 1;
  ARANARA_COLLECTION_STATE_COLLECTED = 2;
  ARANARA_COLLECTION_STATE_FINISHED = 3;
}

enum AuditState {
  AUDIT_NONE = 0;
  AUDIT_WAITING = 1;
  AUDIT_FAILED = 2;
}

enum AvatarRenameAuditSourceType {
  AVATAR_RENAME_AUDIT_SOURCE_NONE = 0;
  AVATAR_RENAME_AUDIT_SOURCE_ITEM = 1;
  AVATAR_RENAME_AUDIT_SOURCE_QUEST = 2;
}

enum ResetAvatarRenameReason {
  RESET_AVATAR_RENAME_REASON_NONE = 0;
  RESET_AVATAR_RENAME_REASON_IP_BLACK_LIST = 1;
  RESET_AVATAR_RENAME_REASON_QUEST_AUDIT = 2;
  RESET_AVATAR_RENAME_REASON_ACTIVE = 3;
}

message ParamList {
  repeated uint32 param_list = 1;
}

message PropValue {
  uint32 type = 1;
  int64 val = 4;
  oneof value {
    int64 ival = 2;
    float fval = 3;
  }
}

message Uint32Pair {
  uint32 key = 1;
  uint32 value = 2;
}

message RegionSimpleInfo {
  string name = 1;
  string title = 2;
  string type = 3;
  string dispatch_url = 4;
}

message QueryRegionListHttpRsp {
  int32 retcode = 1;
  repeated RegionSimpleInfo region_list = 2;
  bytes client_secret_key = 5;
  bytes client_custom_config_encrypted = 6;
  bool enable_login_pc = 7;
}

message ForceUpdateInfo {
  string force_update_url = 1;
}

message StopServerInfo {
  uint32 stop_begin_time = 1;
  uint32 stop_end_time = 2;
  string url = 3;
  string content_msg = 4;
}

message ResVersionConfig {
  uint32 version = 1;
  bool relogin = 2;
  string md5 = 3;
  string release_total_size = 4;
  string version_suffix = 5;
  string branch = 6;
  string next_script_version = 7;
}

message RegionInfo {
  string gateserver_ip = 1;
  uint32 gateserver_port = 2;
  string pay_callback_url = 3;
  string area_type = 7;
  string resource_url = 8;
  string data_url = 9;
  string feedback_url = 10;
  string bulletin_url = 11;
  string resource_url_bak = 12;
  string data_url_bak = 13;
  uint32 client_data_version = 14;
  string handbook_url = 16;
  uint32 client_silence_data_version = 18;
  string client_data_md5 = 19;
  string client_silence_data_md5 = 20;
  ResVersionConfig res_version_config = 22;
  bytes secret_key = 23;
  string official_community_url = 24;
  string client_version_suffix = 26;
  string client_silence_version_suffix = 27;
  bool use_gateserver_domain_name = 28;
  string gateserver_domain_name = 29;
  string user_center_url = 30;
  string account_bind_url = 31;
  string cdkey_url = 32;
  string privacy_policy_url = 33;
  string next_resource_url = 34;
  ResVersionConfig next_res_version_config = 35;
  string game_biz = 36;
}

message QueryCurrRegionHttpRsp {
  int32 retcode = 1;
  string msg = 2;
  RegionInfo region_info = 3;
  bytes client_secret_key = 11;
  bytes region_custom_config_encrypted = 12;
  bytes client_region_custom_config_encrypted = 13;
  oneof detail {
    ForceUpdateInfo force_udpate = 4;
    StopServerInfo stop_server = 5;
  }
}

message PlayerUidExtInfo {
  uint32 reg_platform = 1;
}

message Reliquary {
  uint32 level = 1;
  uint32 exp = 2;
  uint32 promote_level = 3;
  uint32 main_prop_id = 4;
  repeated uint32 append_prop_id_list = 5;
}

message Weapon {
  uint32 level = 1;
  uint32 exp = 2;
  uint32 promote_level = 3;
  map<uint32, uint32> affix_map = 4;
}

message MaterialDeleteInfo {
  message CountDownDelete {
    map<uint32, uint32> delete_time_num_map = 1;
    uint32 config_count_down_time = 2;
  }

  message DateTimeDelete {
    uint32 delete_time = 1;
  }

  message DelayWeekCountDownDelete {
    map<uint32, uint32> delete_time_num_map = 1;
    uint32 config_delay_week = 2;
    uint32 config_count_down_time = 3;
  }

  bool has_delete_config = 1;
  oneof delete_info {
    CountDownDelete count_down_delete = 2;
    DateTimeDelete date_delete = 3;
    DelayWeekCountDownDelete delay_week_count_down_delete = 4;
  }
}

message Material {
  uint32 count = 1;
  MaterialDeleteInfo delete_info = 2;
}

message Equip {
  bool is_locked = 3;
  oneof detail {
    Reliquary reliquary = 1;
    Weapon weapon = 2;
  }
}

message Furniture {
  uint32 count = 1;
}

message Item {
  uint32 item_id = 1;
  uint64 guid = 2;
  oneof detail {
    Material material = 5;
    Equip equip = 6;
    Furniture furniture = 7;
  }
}

message ItemParam {
  uint32 item_id = 1;
  uint32 count = 2;
}

message EquipParam {
  uint32 item_id = 1;
  uint32 item_num = 2;
  uint32 item_level = 3;
  uint32 promote_level = 4;
}

message EquipParamList {
  repeated EquipParam item_list = 1;
}

message Reward {
  uint32 reward_id = 1;
  repeated ItemParam item_list = 2;
}

message AbilityString {
  oneof type {
    string str = 1;
    uint32 hash = 2;
  }
}

message AbilityFloatValue {
  float value = 1;
}

message AbilityScalarValueEntry {
  AbilityString key = 1;
  AbilityScalarType value_type = 2;
  oneof value {
    float float_value = 3;
    string string_value = 4;
    int32 int_value = 5;
    uint32 uint_value = 6;
  }
}

message AbilityAppliedAbility {
  AbilityString ability_name = 1;
  AbilityString ability_override = 2;
  repeated AbilityScalarValueEntry override_map = 3;
  uint32 instanced_ability_id = 4;
}

message AbilityAttachedModifier {
  bool is_invalid = 1;
  uint32 owner_entity_id = 2;
  uint32 instanced_modifier_id = 3;
  bool is_serverbuff_modifier = 4;
  int32 attach_name_hash = 5;
}

message ModifierDurability {
  float reduce_ratio = 1;
  float remaining_durability = 2;
}

message AbilityAppliedModifier {
  int32 modifier_local_id = 1;
  uint32 parent_ability_entity_id = 2;
  AbilityString parent_ability_name = 3;
  AbilityString parent_ability_override = 4;
  uint32 instanced_ability_id = 5;
  uint32 instanced_modifier_id = 6;
  float exist_duration = 7;
  AbilityAttachedModifier attached_instanced_modifier = 8;
  uint32 apply_entity_id = 9;
  bool is_attached_parent_ability = 10;
  ModifierDurability modifier_durability = 11;
  uint32 sbuff_uid = 12;
  bool is_serverbuff_modifier = 13;
}

message MassivePropParam {
  int32 type = 1;
  repeated uint32 reaction_info_list = 2;
  repeated float param_list = 3;
  uint32 sync_flag = 4;
}

message MassivePropSyncInfo {
  int64 id = 1;
  repeated MassivePropParam prop_list = 2;
}

message BreakoutVector2 {
  int32 x = 1;
  int32 y = 2;
}

message BreakoutBrickInfo {
  uint32 hp = 1;
  uint32 element_type = 2;
}

message BreakoutPhysicalObjectModifier {
  uint32 type = 1;
  uint32 id = 2;
  int32 param1 = 3;
  int32 param2 = 4;
  int32 param3 = 5;
  int32 param4 = 6;
  int32 param5 = 7;
  int32 param6 = 8;
  bool bool1 = 9;
  int32 duration = 10;
  int32 end_time = 11;
  uint32 combo = 12;
  uint32 peer_id = 13;
  uint32 skill_type = 14;
  uint32 level = 15;
  uint32 choose_player_count = 16;
}

message BreakoutPhysicalObject {
  uint32 id = 1;
  uint32 index = 2;
  bool is_active = 3;
  BreakoutVector2 pos = 4;
  BreakoutVector2 move_dir = 5;
  int32 speed = 6;
  uint32 init_peer_id = 7;
  uint32 state = 8;
  uint32 element_type = 9;
  uint32 element_reaction_buff = 10;
  repeated BreakoutPhysicalObjectModifier modifier_list = 11;
  int32 total_rotation = 12;
  repeated BreakoutBrickInfo info_list = 13;
  uint32 last_hit_peer_id = 14;
  uint32 speed_increase_count = 15;
  int32 offset = 16;
}

message BreakoutSpawnPoint {
  uint32 id = 1;
  uint32 brick_suite_id = 2;
  repeated BreakoutPhysicalObject spawned_brick_list = 3;
}

message BreakoutElementReactionCounter {
  uint32 element_reaction = 1;
  uint32 count = 2;
}

message BreakoutSyncConnectUidInfo {
  uint32 uid = 1;
  repeated uint32 skill_id_list = 2;
  repeated uint32 skill_level_list = 3;
}

message BreakoutSnapShot {
  uint64 client_game_time = 1;
  uint64 server_game_time = 2;
  repeated BreakoutPhysicalObject ball_list = 3;
  repeated BreakoutPhysicalObject physical_object_list = 4;
  repeated BreakoutAction action_list = 5;
  uint32 wave_index = 6;
  bool is_finish = 7;
  uint32 score = 8;
  uint32 combo = 9;
  uint32 max_combo = 10;
  uint32 life_count = 11;
  uint32 wave_suite_index = 12;
  repeated BreakoutSpawnPoint spawn_point_list = 13;
  uint32 remaining_boss_hp = 14;
  repeated BreakoutElementReactionCounter brick_element_reaction_list = 15;
  repeated BreakoutElementReactionCounter ball_element_reaction_list = 16;
  repeated BreakoutSyncConnectUidInfo uid_info_list = 17;
  repeated BreakoutPhysicalObject dynamic_object_list = 18;
  repeated uint32 id_index_list = 19;
  int32 raw_client_game_time = 20;
}

message BreakoutAction {
  enum BreakoutActionType {
    ACTION_TYPE_NONE = 0;
    ACTION_TYPE_LAUNCH_BALL = 1;
    ACTION_TYPE_DESTROY_BALL = 2;
    ACTION_TYPE_FALLING_OBJECT = 3;
    ACTION_TYPE_MISSILE = 4;
  }

  BreakoutActionType action_type = 1;
  uint64 client_game_time = 2;
  uint64 server_game_time = 3;
  bool is_failed = 4;
  uint32 pre_index = 5;
  uint32 new_index = 6;
  BreakoutVector2 pos = 7;
  BreakoutVector2 move_dir = 8;
  int32 speed = 9;
  uint32 peer_id = 10;
  uint32 element_type = 11;
  uint32 element_reaction_buff = 12;
  uint32 speed_increase_count = 13;
  bool has_extra_ball = 14;
  BreakoutVector2 extra_ball_dir = 15;
  uint32 extra_ball_index = 16;
}

message AbilityMixinRecoverInfo {
  uint32 local_id = 3;
  repeated uint32 data_list = 4;
  bool is_serverbuff_modifier = 5;
  repeated MassivePropSyncInfo massive_prop_list = 6;
  BreakoutSnapShot breakout_snap_shot = 7;
  oneof Source {
    uint32 instanced_ability_id = 1;
    uint32 instanced_modifier_id = 2;
  }
}

message AbilitySyncStateInfo {
  bool is_inited = 1;
  repeated AbilityScalarValueEntry dynamic_value_map = 2;
  repeated AbilityAppliedAbility applied_abilities = 3;
  repeated AbilityAppliedModifier applied_modifiers = 4;
  repeated AbilityMixinRecoverInfo mixin_recover_infos = 5;
  repeated AbilityScalarValueEntry sgv_dynamic_value_map = 6;
}

message AbilityEmbryo {
  uint32 ability_id = 1;
  fixed32 ability_name_hash = 2;
  fixed32 ability_override_name_hash = 3;
}

message AbilityControlBlock {
  repeated AbilityEmbryo ability_embryo_list = 1;
}

message Vector {
  float x = 1;
  float y = 2;
  float z = 3;
}

message VectorPlane {
  float x = 1;
  float y = 2;
}

message Vector3Int {
  int32 x = 1;
  int32 y = 2;
  int32 z = 3;
}

message EntityMoveInfo {
  uint32 entity_id = 1;
  MotionInfo motion_info = 2;
  uint32 scene_time = 3;
  uint32 reliable_seq = 4;
  bool is_reliable = 5;
}

message MotionInfo {
  Vector pos = 1;
  Vector rot = 2;
  Vector speed = 3;
  MotionState state = 4;
  repeated Vector params = 5;
  Vector ref_pos = 6;
  uint32 ref_id = 7;
  uint32 scene_time = 8;
  uint64 interval_velocity = 9;
}

message PlaceInfo {
  Vector pos = 1;
  Vector rot = 2;
}

message SceneWeaponInfo {
  uint32 entity_id = 1;
  uint32 gadget_id = 2;
  uint32 item_id = 3;
  uint64 guid = 4;
  uint32 level = 5;
  uint32 promote_level = 6;
  AbilitySyncStateInfo ability_info = 7;
  map<uint32, uint32> affix_map = 8;
  EntityRendererChangedInfo renderer_changed_info = 9;
}

message SceneReliquaryInfo {
  uint32 item_id = 1;
  uint64 guid = 2;
  uint32 level = 3;
  uint32 promote_level = 4;
}

message ServerBuff {
  uint32 server_buff_uid = 1;
  uint32 server_buff_id = 2;
  uint32 server_buff_type = 3;
  uint32 instanced_modifier_id = 4;
  bool is_modifier_added = 5;
}

message CurVehicleInfo {
  uint32 entity_id = 1;
  uint32 pos = 2;
}

message AvatarExcelInfo {
  uint64 prefab_path_hash = 1;
  uint64 prefab_path_remote_hash = 2;
  uint64 controller_path_hash = 3;
  uint64 controller_path_remote_hash = 4;
  uint64 combat_config_hash = 5;
}

message SceneAvatarInfo {
  uint32 uid = 1;
  uint32 avatar_id = 2;
  uint64 guid = 3;
  uint32 peer_id = 4;
  repeated uint32 equip_id_list = 5;
  uint32 skill_depot_id = 6;
  repeated uint32 talent_id_list = 7;
  SceneWeaponInfo weapon = 8;
  repeated SceneReliquaryInfo reliquary_list = 9;
  uint32 core_proud_skill_level = 11;
  repeated uint32 inherent_proud_skill_list = 12;
  map<uint32, uint32> skill_level_map = 13;
  map<uint32, uint32> proud_skill_extra_level_map = 14;
  repeated ServerBuff server_buff_list = 15;
  repeated uint32 team_resonance_list = 16;
  uint32 wearing_flycloak_id = 17;
  uint32 born_time = 18;
  uint32 costume_id = 19;
  CurVehicleInfo cur_vehicle_info = 20;
  AvatarExcelInfo excel_info = 21;
  uint32 anim_hash = 22;
}

message SceneFishInfo {
  uint32 fish_id = 1;
  uint32 fish_pool_entity_id = 2;
  Vector fish_pool_pos = 3;
  uint32 fish_pool_gadget_id = 4;
  uint32 last_shock_time = 5;
}

message FishtankFishInfo {
  float fish_distance_from_water = 1;
  float fish_scale = 2;
  float initial_rotation_y = 3;
}

message SceneMonsterInfo {
  uint32 monster_id = 1;
  uint32 group_id = 2;
  uint32 config_id = 3;
  repeated SceneWeaponInfo weapon_list = 4;
  uint32 authority_peer_id = 5;
  repeated uint32 affix_list = 6;
  bool is_elite = 7;
  uint32 owner_entity_id = 8;
  uint32 summoned_tag = 9;
  map<uint32, uint32> summon_tag_map = 10;
  uint32 pose_id = 11;
  MonsterBornType born_type = 12;
  uint32 block_id = 13;
  uint32 mark_flag = 14;
  uint32 title_id = 15;
  uint32 special_name_id = 16;
  uint32 attack_target_id = 17;
  MonsterRoute monster_route = 18;
  uint32 ai_config_id = 19;
  uint32 level_route_id = 20;
  uint32 init_pose_id = 21;
  bool is_light = 22;
  uint32 kill_num = 23;
  oneof content {
    SceneFishInfo fish_info = 50;
    FishtankFishInfo fishtank_fish_info = 51;
  }
}

message SceneNpcInfo {
  uint32 npc_id = 1;
  uint32 room_id = 2;
  uint32 parent_quest_id = 3;
  uint32 block_id = 4;
}

message WorktopInfo {
  repeated uint32 option_list = 1;
  bool is_guest_can_operate = 2;
}

message MathQuaternion {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

message PlatformInfo {
  uint32 route_id = 1;
  int32 start_index = 2;
  uint32 start_route_time = 3;
  uint32 start_scene_time = 4;
  Vector start_pos = 7;
  bool is_started = 8;
  MathQuaternion start_rot = 9;
  uint32 stop_scene_time = 10;
  Vector pos_offset = 11;
  MathQuaternion rot_offset = 12;
  MovingPlatformType moving_platform_type = 13;
  bool is_active = 14;
  Route route = 15;
  uint32 point_id = 16;
}

message RoutePoint {
  Vector position = 1;
  float arrive_range = 2;
  bool has_reach_event = 3;
  oneof move_params {
    float velocity = 11;
    float time = 12;
  }
  oneof rotate_params {
    Vector rotation = 21;
    MathQuaternion rotation_speed = 22;
    MathQuaternion axis_speed = 23;
  }
}

message Route {
  repeated RoutePoint route_points = 1;
  uint32 route_type = 2;
}

message MonsterRoute {
  repeated RoutePoint route_points = 1;
  uint32 speed_level = 2;
  uint32 route_type = 3;
  float arrive_range = 4;
}

message WeatherInfo {
  uint32 weather_area_id = 1;
}

message ClientGadgetInfo {
  uint32 camp_id = 1;
  uint32 camp_type = 2;
  uint64 guid = 3;
  uint32 owner_entity_id = 4;
  uint32 target_entity_id = 5;
  bool async_load = 6;
  bool is_peer_id_from_player = 7;
  repeated uint32 target_entity_id_list = 8;
}

message AbilityGadgetInfo {
  uint32 camp_id = 1;
  uint32 camp_target_type = 2;
  uint32 target_entity_id = 3;
}

message GatherGadgetInfo {
  uint32 item_id = 1;
  bool is_forbid_guest = 2;
}

message StatueGadgetInfo {
  repeated uint32 opened_statue_uid_list = 1;
}

message WeeklyBossResinDiscountInfo {
  uint32 discount_num = 1;
  uint32 discount_num_limit = 2;
  uint32 resin_cost = 3;
  uint32 original_resin_cost = 4;
}

message BossChestInfo {
  uint32 monster_config_id = 1;
  uint32 resin = 2;
  repeated uint32 remain_uid_list = 3;
  repeated uint32 qualify_uid_list = 4;
  map<uint32, WeeklyBossResinDiscountInfo> uid_discount_map = 5;
}

message BlossomChestInfo {
  uint32 resin = 1;
  repeated uint32 qualify_uid_list = 2;
  repeated uint32 remain_uid_list = 3;
  uint32 dead_time = 4;
  uint32 blossom_refresh_type = 5;
  uint32 refresh_id = 6;
}

message GadgetCrucibleInfo {
  uint32 mp_play_id = 1;
  uint32 prepare_end_time = 2;
}

message GadgetPlayInfo {
  uint32 play_type = 1;
  uint32 duration = 2;
  repeated uint32 progress_stage_list = 3;
  uint32 start_cd = 4;
  uint32 start_time = 5;
  uint32 progress = 6;
  oneof play_info {
    GadgetCrucibleInfo crucible_info = 21;
  }
}

message MpPlayRewardInfo {
  uint32 resin = 1;
  repeated uint32 remain_uid_list = 2;
  repeated uint32 qualify_uid_list = 3;
}

message GadgetGeneralRewardInfo {
  uint32 resin = 1;
  uint32 dead_time = 2;
  repeated uint32 remain_uid_list = 3;
  repeated uint32 qualify_uid_list = 4;
  ItemParam item_param = 5;
}

message OfferingInfo {
  uint32 offering_id = 1;
}

message BuildingInfo {
  uint32 building_id = 1;
  uint32 point_config_id = 2;
  uint32 cost = 3;
  uint32 refund = 5;
  uint32 owner_uid = 6;
  uint32 current_num = 7;
  uint32 max_num = 8;
}

message FoundationInfo {
  FoundationStatus status = 1;
  repeated uint32 uid_list = 2;
  uint32 current_building_id = 3;
  uint32 locked_by_uid = 4;
}

message VehicleMember {
  uint32 uid = 1;
  uint64 avatar_guid = 2;
  uint32 pos = 3;
}

message VehicleInfo {
  repeated VehicleMember member_list = 1;
  uint32 owner_uid = 2;
  float cur_stamina = 3;
}

message EchoShellInfo {
  uint32 shell_id = 1;
}

message ScreenInfo {
  uint32 live_id = 1;
  uint32 projector_entity_id = 2;
}

message FishPoolInfo {
  uint32 pool_id = 1;
  repeated uint32 fish_area_list = 2;
  uint32 today_fish_num = 3;
}

message CustomCommonNodeInfo {
  int32 parent_index = 1;
  uint32 config_id = 2;
  string slot_identifier = 3;
}

message CustomGadgetTreeInfo {
  repeated CustomCommonNodeInfo node_list = 1;
}

message RoguelikeGadgetInfo {
  uint32 cell_config_id = 1;
  uint32 cell_type = 2;
  uint32 cell_state = 3;
  uint32 cell_id = 4;
}

message NightCrowGadgetInfo {
  repeated uint32 argument_list = 1;
}

message DeshretObeliskGadgetInfo {
  repeated uint32 argument_list = 1;
}

message CoinCollectOperatorInfo {
  uint32 level_id = 1;
}

message SceneGadgetInfo {
  uint32 gadget_id = 1;
  uint32 group_id = 2;
  uint32 config_id = 3;
  uint32 owner_entity_id = 4;
  GadgetBornType born_type = 5;
  uint32 gadget_state = 6;
  uint32 gadget_type = 7;
  bool is_show_cutscene = 8;
  uint32 authority_peer_id = 9;
  bool is_enable_interact = 10;
  uint32 interact_id = 11;
  uint32 mark_flag = 21;
  uint32 prop_owner_entity_id = 22;
  PlatformInfo platform = 23;
  repeated uint32 interact_uid_list = 24;
  uint32 draft_id = 25;
  uint32 gadget_talk_state = 26;
  GadgetPlayInfo play_info = 100;
  oneof content {
    Item trifle_item = 12;
    GatherGadgetInfo gather_gadget = 13;
    WorktopInfo worktop = 14;
    ClientGadgetInfo client_gadget = 15;
    WeatherInfo weather = 17;
    AbilityGadgetInfo ability_gadget = 18;
    StatueGadgetInfo statue_gadget = 19;
    BossChestInfo boss_chest = 20;
    BlossomChestInfo blossom_chest = 41;
    MpPlayRewardInfo mp_play_reward = 42;
    GadgetGeneralRewardInfo general_reward = 43;
    OfferingInfo offering_info = 44;
    FoundationInfo foundation_info = 45;
    VehicleInfo vehicle_info = 46;
    EchoShellInfo shell_info = 47;
    ScreenInfo screen_info = 48;
    FishPoolInfo fish_pool_info = 59;
    CustomGadgetTreeInfo custom_gadget_tree_info = 60;
    RoguelikeGadgetInfo roguelike_gadget_info = 61;
    NightCrowGadgetInfo night_crow_gadget_info = 62;
    DeshretObeliskGadgetInfo deshret_obelisk_gadget_info = 63;
    CoinCollectOperatorInfo coin_collect_operator_info = 64;
  }
}

message AnimatorParameterValueInfo {
  uint32 para_type = 1;
  oneof paraVal {
    int32 int_val = 2;
    float float_val = 3;
    bool bool_val = 4;
  }
}

message ServantInfo {
  uint32 master_entity_id = 1;
  uint32 born_slot_index = 2;
}

message SceneEntityAiInfo {
  bool is_ai_open = 1;
  Vector born_pos = 2;
  map<uint32, uint32> skill_cd_map = 3;
  ServantInfo servant_info = 4;
  map<uint32, uint32> ai_threat_map = 5;
  map<uint32, uint32> skill_group_cd_map = 6;
  uint32 cur_tactic = 7;
}

message EntityRendererChangedInfo {
  map<string, uint32> changed_renderers = 1;
  uint32 visibility_count = 2;
  bool is_cached = 3;
}

message PropPair {
  uint32 type = 1;
  PropValue prop_value = 2;
}

message FightPropPair {
  uint32 prop_type = 1;
  float prop_value = 2;
}

message AnimatorParameterValueInfoPair {
  int32 name_id = 1;
  AnimatorParameterValueInfo animator_para = 2;
}

message EntityEnvironmentInfo {
  uint32 json_climate_type = 1;
  uint32 climate_area_id = 2;
}

message EntityClientExtraInfo {
  Vector skill_anchor_position = 1;
}

message EntityAuthorityInfo {
  AbilitySyncStateInfo ability_info = 1;
  EntityRendererChangedInfo renderer_changed_info = 2;
  SceneEntityAiInfo ai_info = 3;
  Vector born_pos = 4;
  repeated AnimatorParameterValueInfoPair pose_para_list = 5;
  EntityClientExtraInfo client_extra_info = 6;
}

message SceneEntityInfo {
  ProtEntityType entity_type = 1;
  uint32 entity_id = 2;
  string name = 3;
  MotionInfo motion_info = 4;
  repeated PropPair prop_list = 5;
  repeated FightPropPair fight_prop_list = 6;
  uint32 life_state = 7;
  repeated AnimatorParameterValueInfoPair animator_para_list = 9;
  uint32 last_move_scene_time_ms = 17;
  uint32 last_move_reliable_seq = 18;
  EntityClientData entity_client_data = 19;
  repeated EntityEnvironmentInfo entity_environment_info_list = 20;
  EntityAuthorityInfo entity_authority_info = 21;
  repeated string tag_list = 22;
  repeated ServerBuff server_buff_list = 23;
  oneof entity {
    SceneAvatarInfo avatar = 10;
    SceneMonsterInfo monster = 11;
    SceneNpcInfo npc = 12;
    SceneGadgetInfo gadget = 13;
  }
}

message CreateGadgetInfo {
  message Chest {
    uint32 chest_drop_id = 1;
    bool is_show_cutscene = 2;
  }

  GadgetBornType born_type = 1;
  Chest chest = 2;
}

message CreateEntityInfo {
  uint32 level = 5;
  Vector pos = 6;
  Vector rot = 7;
  uint32 scene_id = 10;
  uint32 room_id = 11;
  uint32 client_unique_id = 12;
  oneof entity {
    uint32 monster_id = 1;
    uint32 npc_id = 2;
    uint32 gadget_id = 3;
    uint32 item_id = 4;
  }
  oneof entity_create_info {
    CreateGadgetInfo gadget = 13;
  }
}

message TrialAvatarGrantRecord {
  enum GrantReason {
    INVALID = 0;
    GRANT_BY_QUEST = 1;
    GRANT_BY_TRIAL_AVATAR_ACTIVITY = 2;
    GRANT_BY_DUNGEON_ELEMENT_CHALLENGE = 3;
    GRANT_BY_MIST_TRIAL_ACTIVITY = 4;
    GRANT_BY_SUMO_ACTIVITY = 5;
    GRANT_BY_POTION_ACTIVITY = 6;
    GRANT_BY_CRYSTAL_LINK_ACTIVITY = 7;
    GRANT_BY_IRODORI_MASTER = 8;
    GRANT_BY_GM = 9;
    GRANT_BY_INSTABLE_SPRAY_ACTIVITY = 10;
    GRANT_BY_MUQADAS_POTION_ACTIVITY = 11;
    GRANT_BY_VINTAGE_HUNTING = 12;
    GRANT_BY_CHAR_AMUSEMENT = 13;
    GRANT_BY_DUEL_HEART = 14;
  }

  uint32 grant_reason = 1;
  uint32 from_parent_quest_id = 2;
}

message TrialAvatarInfo {
  uint32 trial_avatar_id = 1;
  repeated Item trial_equip_list = 2;
  TrialAvatarGrantRecord grant_record = 3;
}

message AvatarSkillInfo {
  uint32 pass_cd_time = 1;
  repeated uint32 full_cd_time_list = 2;
  uint32 max_charge_count = 3;
}

message FetterData {
  uint32 fetter_id = 1;
  uint32 fetter_state = 2;
  repeated uint32 cond_index_list = 3;
}

message AvatarFetterInfo {
  uint32 exp_number = 1;
  uint32 exp_level = 2;
  repeated uint32 open_id_list = 3;
  repeated uint32 finish_id_list = 4;
  repeated uint32 rewarded_fetter_level_list = 5;
  repeated FetterData fetter_list = 6;
}

message AvatarExpeditionInfo {
  AvatarExpeditionState state = 1;
  uint32 exp_id = 2;
  uint32 hour_time = 3;
  uint32 start_time = 4;
  float shorten_ratio = 5;
}

message AvatarEquipAffixInfo {
  uint32 equip_affix_id = 1;
  uint32 left_cd_time = 2;
}

message AvatarInfo {
  uint32 avatar_id = 1;
  uint64 guid = 2;
  map<uint32, PropValue> prop_map = 3;
  uint32 life_state = 4;
  repeated uint64 equip_guid_list = 5;
  repeated uint32 talent_id_list = 6;
  map<uint32, float> fight_prop_map = 7;
  TrialAvatarInfo trial_avatar_info = 9;
  map<uint32, AvatarSkillInfo> skill_map = 10;
  uint32 skill_depot_id = 11;
  AvatarFetterInfo fetter_info = 12;
  uint32 core_proud_skill_level = 13;
  repeated uint32 inherent_proud_skill_list = 14;
  map<uint32, uint32> skill_level_map = 15;
  AvatarExpeditionState expedition_state = 16;
  map<uint32, uint32> proud_skill_extra_level_map = 17;
  bool is_focus = 18;
  uint32 avatar_type = 19;
  repeated uint32 team_resonance_list = 20;
  uint32 wearing_flycloak_id = 21;
  repeated AvatarEquipAffixInfo equip_affix_list = 22;
  uint32 born_time = 23;
  repeated uint32 pending_promote_reward_list = 24;
  uint32 costume_id = 25;
  AvatarExcelInfo excel_info = 26;
  uint32 anim_hash = 27;
}

message ShowEquip {
  uint32 item_id = 1;
  oneof detail {
    Reliquary reliquary = 2;
    Weapon weapon = 3;
  }
}

message ShowAvatarInfo {
  uint32 avatar_id = 1;
  map<uint32, PropValue> prop_map = 2;
  repeated uint32 talent_id_list = 3;
  map<uint32, float> fight_prop_map = 4;
  uint32 skill_depot_id = 5;
  uint32 core_proud_skill_level = 6;
  repeated uint32 inherent_proud_skill_list = 7;
  map<uint32, uint32> skill_level_map = 8;
  map<uint32, uint32> proud_skill_extra_level_map = 9;
  repeated ShowEquip equip_list = 10;
  AvatarFetterInfo fetter_info = 11;
  uint32 costume_id = 12;
  AvatarExcelInfo excel_info = 13;
}

message Quest {
  uint32 quest_id = 1;
  uint32 state = 2;
  uint32 start_time = 4;
  bool is_random = 5;
  uint32 parent_quest_id = 6;
  uint32 quest_config_id = 7;
  uint32 start_game_time = 8;
  uint32 accept_time = 9;
  repeated uint32 lacked_npc_list = 10;
  repeated uint32 finish_progress_list = 11;
  repeated uint32 fail_progress_list = 12;
  map<uint32, uint32> lacked_npc_map = 13;
  repeated uint32 lacked_place_list = 14;
  map<uint32, uint32> lacked_place_map = 15;
}

message NpcPositionInfo {
  uint32 npc_id = 1;
  Vector pos = 2;
}

message MailTextContent {
  string title = 1;
  string content = 2;
  string sender = 3;
}

message MailItem {
  EquipParam equip_param = 1;
  MaterialDeleteInfo delete_info = 2;
}

message MailData {
  uint32 mail_id = 1;
  MailTextContent mail_text_content = 4;
  repeated MailItem item_list = 7;
  uint32 send_time = 8;
  uint32 expire_time = 9;
  uint32 importance = 10;
  bool is_read = 11;
  bool is_attachment_got = 12;
  uint32 config_id = 13;
  repeated string argument_list = 14;
  MailCollectState collect_state = 15;
}

message OnlinePlayerInfo {
  uint32 uid = 1;
  string nickname = 2;
  uint32 player_level = 3;
  uint32 avatar_id = 4;
  MpSettingType mp_setting_type = 5;
  uint32 cur_player_num_in_world = 6;
  uint32 world_level = 7;
  string online_id = 8;
  uint32 name_card_id = 9;
  repeated uint32 blacklist_uid_list = 10;
  string signature = 11;
  ProfilePicture profile_picture = 12;
  string psn_id = 13;
}

message Birthday {
  uint32 month = 1;
  uint32 day = 2;
}

message MapMarkPoint {
  uint32 scene_id = 1;
  string name = 2;
  Vector pos = 3;
  MapMarkPointType point_type = 4;
  uint32 monster_id = 5;
  MapMarkFromType from_type = 6;
  uint32 quest_id = 7;
}

message MassiveWaterInfo {
  int64 id = 1;
}

message MassiveGrassInfo {
  uint32 id = 1;
  Vector center = 2;
  Vector size = 3;
}

message MassiveBoxInfo {
  int32 id = 1;
  uint32 configId = 2;
  Vector center = 3;
  Vector extents = 4;
  Vector up = 5;
  Vector forward = 6;
  Vector right = 7;
}

message ClientMassiveEntity {
  uint32 entity_type = 1;
  uint32 config_id = 2;
  int64 obj_id = 3;
  oneof entity_info {
    MassiveWaterInfo water_info = 4;
    MassiveGrassInfo grass_info = 5;
    MassiveBoxInfo box_info = 6;
  }
}

message ShapeSphere {
  Vector center = 1;
  float radius = 2;
}

message ShapeBox {
  Vector center = 1;
  Vector axis0 = 2;
  Vector axis1 = 3;
  Vector axis2 = 4;
  Vector extents = 5;
}

message ServerMassiveEntity {
  uint32 entity_type = 1;
  uint32 config_id = 2;
  uint32 runtime_id = 3;
  uint32 authority_peer_id = 4;
  int64 obj_id = 5;
  oneof entity_info {
    MassiveWaterInfo water_info = 6;
    MassiveGrassInfo grass_info = 7;
    MassiveBoxInfo box_info = 8;
  }
}

message MassiveEntityState {
  uint32 entity_type = 1;
  int64 obj_id = 2;
  uint32 element_state = 3;
}

message EntityClientData {
  uint32 wind_change_scene_time = 1;
  float windmill_sync_angle = 2;
  int32 wind_change_target_level = 3;
}

message BlockInfo {
  uint32 block_id = 1;
  uint32 data_version = 2;
  bytes bin_data = 3;
  bool is_dirty = 4;
}

message ShopMcoinProduct {
  string product_id = 1;
  string price_tier = 2;
  uint32 mcoin_base = 3;
  uint32 mcoin_non_first = 4;
  uint32 mcoin_first = 5;
  uint32 bought_num = 6;
  bool is_audit = 7;
}

message ShopCardProduct {
  message ResinCard {
    repeated ItemParam base_item_list = 1;
    repeated ItemParam per_day_item_list = 2;
  }

  string product_id = 1;
  string price_tier = 2;
  uint32 mcoin_base = 3;
  uint32 hcoin_per_day = 4;
  uint32 days = 5;
  uint32 remain_reward_days = 6;
  uint32 card_product_type = 7;
  oneof extra_card_data {
    ResinCard resin_card = 101;
  }
}

message PlayProduct {
  string product_id = 1;
  string price_tier = 2;
  uint32 schedule_id = 3;
}

message ShopConcertProduct {
  string product_id = 1;
  string price_tier = 2;
  uint32 obtain_count = 3;
  uint32 obtain_limit = 4;
  uint32 begin_time = 5;
  uint32 end_time = 6;
  uint32 buy_times = 7;
}

message HashedString {
  uint32 hash = 1;
}

message PlayTeamEntityInfo {
  uint32 entity_id = 1;
  uint32 player_uid = 2;
  uint32 authority_peer_id = 3;
  uint32 gadget_config_id = 5;
  AbilitySyncStateInfo ability_info = 6;
}

message FeatureBlockInfo {
  uint32 feature_type = 1;
  uint32 end_time = 2;
}

message MapMarkTipsInfo {
  MapMarkTipsType tips_type = 1;
  repeated uint32 point_id_list = 2;
}

message ExhibitionDisplayInfo {
  uint32 id = 1;
  uint32 param = 2;
  uint32 detail_param = 3;
}

message ProfilePicture {
  uint32 avatar_id = 1;
  uint32 costume_id = 2;
}

message RedPointData {
  uint32 red_point_type = 1;
  bool is_show = 2;
  uint32 content_id = 3;
}

message HomeMarkPointNPCData {
  uint32 avatar_id = 1;
  uint32 costume_id = 2;
}

message HomeMarkPointSuiteData {
  uint32 suite_id = 1;
}

message HomeMarkPointFurnitureData {
  uint32 guid = 1;
  uint32 furniture_id = 2;
  uint32 furniture_type = 3;
  Vector pos = 4;
  oneof extra {
    HomeMarkPointNPCData npc_data = 6;
    HomeMarkPointSuiteData suite_data = 7;
  }
}

message MapAreaInfo {
  uint32 map_area_id = 1;
  bool is_open = 2;
}

message HomeFurnitureArrangementMuipData {
  uint32 furniture_id = 1;
  Vector spawn_pos = 2;
  Vector spawn_rot = 3;
}

message HomeBlockArrangementMuipData {
  uint32 block_id = 1;
  repeated HomeFurnitureArrangementMuipData furniture_data_list = 2;
}

message HomeSceneArrangementMuipData {
  uint32 module_id = 1;
  uint32 scene_id = 2;
  bool is_room = 3;
  repeated HomeBlockArrangementMuipData block_data_list = 4;
}

message CustomDungeonBattleRecordMuipData {
  uint64 dungeon_guid = 1;
  uint32 min_cost_time = 2;
}

message PlayerCustomDungeonMuipData {
  uint32 uid = 1;
  repeated uint64 publish_dungeon_list = 2;
  repeated uint64 store_dungeon_list = 3;
  repeated CustomDungeonBattleRecordMuipData battle_record_list = 4;
}

message CustomDungeonSettingMuipData {
  bool is_arrive_finish = 1;
  uint32 coin_limit = 2;
  uint32 time_limit = 3;
  bool is_forbid_skill = 4;
  uint32 life_num = 5;
}

message CustomDungeonAbstractMuipData {
  uint32 first_publish_time = 1;
  uint32 last_publish_time = 2;
  map<uint32, uint32> brick_statistics_map = 3;
}

message CustomDungeonSocialMuipData {
  uint32 play_num = 1;
  uint32 like_num = 2;
  uint32 store_num = 3;
  uint32 win_num = 4;
}

message CustomDungeonBriefMuipData {
  uint64 dungeon_guid = 1;
  uint32 dungeon_id = 2;
  string creator_nickname = 3;
  repeated uint32 tag_list = 4;
  CustomDungeonSettingMuipData setting = 5;
  CustomDungeonAbstractMuipData abstract = 6;
  CustomDungeonSocialMuipData social = 7;
}

message CustomDungeonBatchBriefMuipData {
  repeated CustomDungeonBriefMuipData brief_list = 1;
}

message HomeBlueprintBriefMuipData {
  string share_code = 1;
  uint32 owner_uid = 2;
  uint32 module_id = 3;
  uint32 scene_id = 4;
  uint32 block_id = 5;
  bool is_allow_copy = 6;
  uint32 create_time = 7;
}

message HomeBlueprintBatchBriefMuipData {
  repeated HomeBlueprintBriefMuipData brief_list = 1;
  repeated string not_exist_share_code_list = 2;
}

message ContentAuditInfo {
  bool is_open = 1;
  string content = 2;
  uint32 submit_count = 3;
  AuditState audit_state = 4;
  uint32 submit_limit = 5;
}

message ContentAuditData {
  string type = 1;
  string content = 2;
  uint32 auto_pass_time = 3;
}

message ContentAuditField {
  repeated ContentAuditData segment_list = 1;
  string name = 2;
}

message ContentAuditAuxiliaryField {
  string name = 1;
  string value = 2;
}

message NicknameSignatureAuditData {
  string aid = 1;
  string entity_id = 2;
  string lang = 3;
  string queue_key = 4;
  string region = 5;
  uint32 uid = 6;
  repeated ContentAuditField audit_field_list = 7;
  repeated ContentAuditAuxiliaryField aux_field_list = 8;
}

message AvatarRenameAuditContent {
  string type = 1;
  string content = 2;
  uint32 auto_fail_time = 3;
}

message AvatarRenameContentAuditField {
  repeated AvatarRenameAuditContent segment_list = 1;
  string name = 2;
}

message AvatarRenameAuditData {
  string aid = 1;
  string entity_id = 2;
  string lang = 3;
  string queue_key = 4;
  string region = 5;
  uint32 uid = 6;
  repeated AvatarRenameContentAuditField audit_field_list = 7;
  repeated ContentAuditAuxiliaryField aux_field_list = 8;
}

message ActivityDungeonAvatar {
  uint32 avatar_id = 1;
  bool is_trial = 2;
  uint32 costume_id = 3;
}

message GCGChallengeData {
  uint32 challenge_id = 1;
  uint32 challenge_type = 2;
  repeated uint32 param_list = 3;
  uint32 progress = 4;
}

message GCGDuelExtra {
  repeated uint32 card_id_list = 1;
  uint32 field_id = 2;
  uint32 card_back_id = 3;
  map<uint32, uint32> card_face_map = 4;
  repeated GCGChallengeData challenge_list = 5;
  uint32 score = 6;
  bool is_match_ai = 7;
  uint32 ai_deck_id = 8;
  bool is_internal = 9;
  repeated uint32 forbid_finish_challenge_list = 10;
  uint32 level = 11;
  uint32 client_version = 12;
}

message QueryIpRegionData {
  string ip = 1;
}
